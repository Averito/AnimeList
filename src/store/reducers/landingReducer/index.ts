import { createSlice, PayloadAction } from '@reduxjs/toolkit'

import { Title } from 'api/anilibriaApi/types'
import { api } from 'api'
import {
	loginThunk,
	forgotPasswordThunk,
	registrationThunk,
	authCheckThunk,
	getUpdatesThunk
} from './landingThunks'
import { errorMessage, successMessage, warningMessage } from 'helpers/messages'

const landingSlice = createSlice({
	name: 'landing',
	initialState: {
		userId: '',
		isAuth: Boolean(localStorage.getItem('isAuth') === 'true') || false,
		titleList: [] as Title[],
		titleListLoading: true,
		randomTitle: {} as Title,
		autoCompleteOptions: [] as Array<{ value: string }>,
		isAdult: false,
		registrationComplete: false,
		forgotPasswordComplete: false
	},
	reducers: {
		setAdult(state, { payload }: PayloadAction<boolean>) {
			state.isAdult = payload
		},
		logout(state) {
			state.isAuth = false
			state.isAdult = false
			state.userId = ''
			localStorage.setItem('token', '')
			localStorage.setItem('isAuth', 'false')
		},
		setRandomTitle(state) {
			const randomIdx = Math.floor(Math.random() * state.titleList.length)
			state.randomTitle = state.titleList[randomIdx]
		},
		setAutoCompleteOption(
			state,
			{ payload }: PayloadAction<Array<{ value: string }>>
		) {
			state.autoCompleteOptions = payload
		}
	},
	extraReducers: builder => {
		builder
			.addCase(loginThunk.fulfilled, (state, { payload }) => {
				const { access_token: accessToken, userId } = payload

				successMessage('–ù—É –≤—Å—ë, —Ç–µ–ø–µ—Ä—å —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —É –º–µ–Ω—è')
				api.setUserToken(accessToken)
				localStorage.setItem('token', accessToken)
				localStorage.setItem('isAuth', 'true')
				state.userId = userId
				state.isAuth = true
			})
			.addCase(loginThunk.pending, state => {
				warningMessage('–í–æ—Ä—É—é –¥–∞–Ω–Ω—ã–µ... üëÄ')
			})
			.addCase(loginThunk.rejected, state => {
				errorMessage('–≠—Ç–æ –Ω–µ —Ç–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–¥—É–º–∞–π –µ—â—ë')
			})
			.addCase(registrationThunk.fulfilled, state => {
				state.registrationComplete = true
			})
			.addCase(registrationThunk.rejected, state => {
				errorMessage('–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
				state.registrationComplete = false
			})
			.addCase(authCheckThunk.fulfilled, (state, { payload }) => {
				localStorage.setItem('isAuth', 'true')
				state.isAuth = true
				state.userId = payload.id
			})
			.addCase(authCheckThunk.rejected, state => {
				errorMessage('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
				localStorage.setItem('token', '')
				localStorage.setItem('isAuth', 'false')
				state.isAuth = false
			})
			.addCase(forgotPasswordThunk.fulfilled, state => {
				state.forgotPasswordComplete = true
			})
			.addCase(forgotPasswordThunk.rejected, state => {
				errorMessage('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
				state.forgotPasswordComplete = false
			})
			.addCase(getUpdatesThunk.fulfilled, (state, { payload }) => {
				state.titleListLoading = false
				const randomIdx = Math.floor(Math.random() * state.titleList.length)
				state.titleList = payload
				state.randomTitle = payload[randomIdx]
			})
			.addCase(getUpdatesThunk.rejected, state => {
				state.titleListLoading = false
				errorMessage(
					'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∞–Ω–∏–ª–∏–±—Ä–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É'
				)
			})
	}
})

export const { reducer: landingReducer } = landingSlice
export const { setAdult, logout, setRandomTitle, setAutoCompleteOption } =
	landingSlice.actions
